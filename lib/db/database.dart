import 'dart:io';

import 'package:drift/drift.dart';
import 'package:drift/native.dart';
import 'package:path_provider/path_provider.dart';
import 'package:path/path.dart' as p;

// Import the table definition
import 'tables.dart';

part 'database.g.dart'; // Generated by build_runner

@DriftDatabase(tables: [Tasks]) // Add other tables here if you have more
class AppDatabase extends _$AppDatabase {
  AppDatabase() : super(_openConnection());

  @override
  int get schemaVersion => 1; // Increment this when you change the schema

  // You can add methods here for complex queries if needed later
  // For example:
  // Future<List<Task>> get allTasks => select(tasks).get();
  // Stream<List<Task>> watchAllTasks => select(tasks).watch();
  // Future<int> addTask(TasksCompanion entry) => into(tasks).insert(entry);
}

LazyDatabase _openConnection() {
  // The LazyDatabase util lets us find the right location for the file async.
  return LazyDatabase(() async {
    final dbFolder = await getApplicationDocumentsDirectory();
    final file = File(p.join(dbFolder.path, 'db.sqlite'));
    return NativeDatabase.createInBackground(file);
  });
}
